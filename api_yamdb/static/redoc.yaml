openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /api/v1/categories/:
    get:
      operationId: listCategorys
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
          description: ''
      tags:
      - api
    post:
      operationId: createCategory
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
      tags:
      - api
  /api/v1/titles/:
    get:
      operationId: listTitles
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: name
        required: false
        in: query
        description: name
        schema:
          type: string
      - name: category
        required: false
        in: query
        description: category
        schema:
          type: string
      - name: genre
        required: false
        in: query
        description: genre
        schema:
          type: string
      - name: year
        required: false
        in: query
        description: year
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Title'
          description: ''
      tags:
      - api
    post:
      operationId: createTitle
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TitleCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleCreate'
          description: ''
      tags:
      - api
  /api/v1/titles/{id}/:
    get:
      operationId: retrieveTitle
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: "A unique integer value identifying this \u041F\u0440\u043E\u0438\
          \u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435."
        schema:
          type: string
      - name: name
        required: false
        in: query
        description: name
        schema:
          type: string
      - name: category
        required: false
        in: query
        description: category
        schema:
          type: string
      - name: genre
        required: false
        in: query
        description: genre
        schema:
          type: string
      - name: year
        required: false
        in: query
        description: year
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
          description: ''
      tags:
      - api
    put:
      operationId: updateTitle
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: "A unique integer value identifying this \u041F\u0440\u043E\u0438\
          \u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435."
        schema:
          type: string
      - name: name
        required: false
        in: query
        description: name
        schema:
          type: string
      - name: category
        required: false
        in: query
        description: category
        schema:
          type: string
      - name: genre
        required: false
        in: query
        description: genre
        schema:
          type: string
      - name: year
        required: false
        in: query
        description: year
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TitleCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleCreate'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateTitle
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: "A unique integer value identifying this \u041F\u0440\u043E\u0438\
          \u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435."
        schema:
          type: string
      - name: name
        required: false
        in: query
        description: name
        schema:
          type: string
      - name: category
        required: false
        in: query
        description: category
        schema:
          type: string
      - name: genre
        required: false
        in: query
        description: genre
        schema:
          type: string
      - name: year
        required: false
        in: query
        description: year
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TitleCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TitleCreate'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyTitle
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: "A unique integer value identifying this \u041F\u0440\u043E\u0438\
          \u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435."
        schema:
          type: string
      - name: name
        required: false
        in: query
        description: name
        schema:
          type: string
      - name: category
        required: false
        in: query
        description: category
        schema:
          type: string
      - name: genre
        required: false
        in: query
        description: genre
        schema:
          type: string
      - name: year
        required: false
        in: query
        description: year
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/v1/genres/:
    get:
      operationId: listGenres
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Genre'
          description: ''
      tags:
      - api
    post:
      operationId: createGenre
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Genre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Genre'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
      tags:
      - api
  /api/v1/users/:
    get:
      operationId: listCustomUsers
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    post:
      operationId: createCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
  /api/v1/users/me/:
    get:
      operationId: meCustomUser
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    patch:
      operationId: meCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
  /api/v1/users/{username}/:
    get:
      operationId: retrieveCustomUser
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
          only.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    put:
      operationId: updateCustomUser
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
          only.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateCustomUser
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
          only.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyCustomUser
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
          only.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/v1/titles/{title_id}/reviews/:
    get:
      operationId: listReviews
      description: ''
      parameters:
      - name: title_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
          description: ''
      tags:
      - api
    post:
      operationId: createReview
      description: ''
      parameters:
      - name: title_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
      tags:
      - api
  /api/v1/titles/{title_id}/reviews/{id}/:
    get:
      operationId: retrieveReview
      description: ''
      parameters:
      - name: title_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
      tags:
      - api
    put:
      operationId: updateReview
      description: ''
      parameters:
      - name: title_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateReview
      description: ''
      parameters:
      - name: title_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyReview
      description: ''
      parameters:
      - name: title_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/v1/titles/{title_id}/reviews/{review_id}/comments/:
    get:
      operationId: listComments
      description: ''
      parameters:
      - name: title_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: review_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
          description: ''
      tags:
      - api
    post:
      operationId: createComment
      description: ''
      parameters:
      - name: title_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: review_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
      tags:
      - api
  /api/v1/titles/{title_id}/reviews/{review_id}/comments/{id}/:
    get:
      operationId: retrieveComment
      description: ''
      parameters:
      - name: title_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: review_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
      tags:
      - api
    put:
      operationId: updateComment
      description: ''
      parameters:
      - name: title_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: review_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateComment
      description: ''
      parameters:
      - name: title_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: review_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyComment
      description: ''
      parameters:
      - name: title_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: review_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/v1/auth/signup/:
    post:
      operationId: createcreate_user
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/auth/token/:
    post:
      operationId: createcreate_token
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - api
  /api/v1/categories/{slug}/:
    delete:
      operationId: destroyCategory
      description: ''
      parameters:
      - name: slug
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/v1/genres/{slug}/:
    delete:
      operationId: destroyGenre
      description: ''
      parameters:
      - name: slug
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
components:
  schemas:
    Category:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - name
      - slug
    Title:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        year:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        description:
          type: string
          nullable: true
          maxLength: 200
        genre:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                maxLength: 200
              slug:
                type: string
                maxLength: 50
                pattern: ^[-a-zA-Z0-9_]+$
            required:
            - name
            - slug
          readOnly: true
        category:
          type: object
          properties:
            name:
              type: string
              maxLength: 200
            slug:
              type: string
              maxLength: 50
              pattern: ^[-a-zA-Z0-9_]+$
          required:
          - name
          - slug
          readOnly: true
        rating:
          type: integer
      required:
      - name
      - year
    Genre:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - name
      - slug
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
        role:
          enum:
          - user
          - admin
          - moderator
          type: string
      required:
      - username
      - email
    Review:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: string
          readOnly: true
        title:
          type: string
          readOnly: true
        text:
          type: string
          description: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0435\u043A\
            \u0441\u0442 \u043E\u0442\u0437\u044B\u0432\u0430"
        pub_date:
          type: string
          format: date-time
          readOnly: true
        score:
          type: integer
          maximum: 11
          minimum: 1
      required:
      - text
      - score
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: string
          readOnly: true
        review:
          type: string
          readOnly: true
        text:
          type: string
          description: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0435\u043A\
            \u0441\u0442 \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\
            \u044F"
        pub_date:
          type: string
          format: date-time
          readOnly: true
      required:
      - text
    TitleCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        category:
          type: string
        genre:
          type: array
          items:
            type: string
        name:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
          maxLength: 200
        year:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
      required:
      - category
      - genre
      - name
      - year
